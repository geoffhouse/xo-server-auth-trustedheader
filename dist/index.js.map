{"version":3,"sources":["../src/index.js"],"names":["DEFAULTS","disableRequestedAuthnContext","configurationSchema","type","properties","userHeader","title","description","required","AuthTrustedHeaderXoPlugin","constructor","staticConfig","xo","_conf","_strategyOptions","strategyOptions","_unregisterPassportStrategy","undefined","_xo","_userHeader","configure","loaded","conf","toLowerCase","headers","unload","load","registerPassportStrategy","Strategy","requestHeaders","done","userName","console","warn","registerUser","error","message","opts"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;AAEA;AAEA,MAAMA,QAAQ,GAAG;AACfC,EAAAA,4BAA4B,EAAE;AADf,CAAjB;AAIO,MAAMC,mBAAmB,GAAG;AACjCC,EAAAA,IAAI,EAAE,QAD2B;AAEjCC,EAAAA,UAAU,EAAE;AACVC,IAAAA,UAAU,EAAE;AACVC,MAAAA,KAAK,EAAE,aADG;AAEVC,MAAAA,WAAW,EAAE,uCAFH;AAGVJ,MAAAA,IAAI,EAAE;AAHI;AADF,GAFqB;AASjCK,EAAAA,QAAQ,EAAE,CAAC,YAAD;AATuB,CAA5B,C,CAYP;;;;AAEA,MAAMC,yBAAN,CAAgC;AAC9BC,EAAAA,WAAW,CAAC;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,GAAD,EAAuB;AAChC,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,gBAAL,GAAwBH,YAAY,CAACI,eAArC;AACA,SAAKC,2BAAL,GAAmCC,SAAnC;AACA,SAAKC,GAAL,GAAWN,EAAX;AACA,SAAKO,WAAL,GAAmB,IAAnB;AACD;;AAEKC,EAAAA,SAAN,OAAyC;AAAEC,IAAAA;AAAF,GAAzC,EAAqD;AAAA;;AAAA;AAAA,UAAnChB,UAAmC,QAAnCA,UAAmC;AAAA,UAApBiB,IAAoB;;AACnD,MAAA,KAAI,CAACH,WAAL,GAAmBd,UAAU,CAACkB,WAAX,EAAnB;AACA,MAAA,KAAI,CAACV,KAAL,+DACK,KAAI,CAACC,gBADV,GAEKd,QAFL,GAGKsB,IAHL;AAIEE,QAAAA,OAAO,EAAE,CAAE,KAAI,CAACL,WAAP;AAJX;;AAOA,UAAIE,MAAJ,EAAY;AACV,cAAM,KAAI,CAACI,MAAL,EAAN;AACA,cAAM,KAAI,CAACC,IAAL,EAAN;AACD;AAZkD;AAapD;;AAEDA,EAAAA,IAAI,GAAG;AAAA;;AACL,UAAMd,EAAE,GAAG,KAAKM,GAAhB;AAEA,SAAKF,2BAAL,GAAmCJ,EAAE,CAACe,wBAAH,CACjC,IAAIC,+BAAJ,CAAa,KAAKf,KAAlB;AAAA,oCAAyB,WAAOgB,cAAP,EAAuBC,IAAvB,EAAgC;AAEvD,cAAMC,QAAQ,GAAGF,cAAc,CAAC,MAAI,CAACV,WAAN,CAA/B;;AACA,YAAI,CAACY,QAAL,EAAe;AACbC,UAAAA,OAAO,CAACC,IAAR,CAAa,+BAAb,EAA8CJ,cAA9C;AACAC,UAAAA,IAAI,CAAC,oCAAD,CAAJ;AACA;AACD;;AAED,YAAI;AACFA,UAAAA,IAAI,CAAC,IAAD,QAAalB,EAAE,CAACsB,YAAH,CAAgB,eAAhB,EAAiCH,QAAjC,CAAb,CAAJ;AACD,SAFD,CAEE,OAAOI,KAAP,EAAc;AACdL,UAAAA,IAAI,CAACK,KAAK,CAACC,OAAP,CAAJ;AACD;AACF,OAdD;;AAAA;AAAA;AAAA;AAAA,QADiC,CAAnC;AAiBD;;AAEDX,EAAAA,MAAM,GAAG;AACP,SAAKT,2BAAL;AACD;;AAhD6B,C,CAmDhC;;;eAEeqB,IAAI,IAAI,IAAI5B,yBAAJ,CAA8B4B,IAA9B,C","sourcesContent":["import { Strategy } from 'passport-trusted-header'\n\n// ===================================================================\n\nconst DEFAULTS = {\n  disableRequestedAuthnContext: false\n}\n\nexport const configurationSchema = {\n  type: 'object',\n  properties: {\n    userHeader: {\n      title: 'User Header',\n      description: 'HTTP header field to use for username',\n      type: 'string'\n    }\n  },\n  required: ['userHeader']\n}\n\n// ===================================================================\n\nclass AuthTrustedHeaderXoPlugin {\n  constructor({ staticConfig, xo }) {\n    this._conf = null\n    this._strategyOptions = staticConfig.strategyOptions\n    this._unregisterPassportStrategy = undefined\n    this._xo = xo\n    this._userHeader = null\n  }\n\n  async configure({ userHeader, ...conf }, { loaded }) {\n    this._userHeader = userHeader.toLowerCase()\n    this._conf = {\n      ...this._strategyOptions,\n      ...DEFAULTS,\n      ...conf,\n      headers: [ this._userHeader ]\n    }\n\n    if (loaded) {\n      await this.unload()\n      await this.load()\n    }\n  }\n\n  load() {\n    const xo = this._xo\n\n    this._unregisterPassportStrategy = xo.registerPassportStrategy(\n      new Strategy(this._conf, async (requestHeaders, done) => {\n\n        const userName = requestHeaders[this._userHeader];\n        if (!userName) {\n          console.warn('xo-server-auth-trustedheader:', requestHeaders)\n          done('no username passed in http headers')\n          return\n        }\n\n        try {\n          done(null, await xo.registerUser('trustedheader', userName))\n        } catch (error) {\n          done(error.message)\n        }\n      })\n    )\n  }\n\n  unload() {\n    this._unregisterPassportStrategy()\n  }\n}\n\n// ===================================================================\n\nexport default opts => new AuthTrustedHeaderXoPlugin(opts)\n"],"file":"index.js"}